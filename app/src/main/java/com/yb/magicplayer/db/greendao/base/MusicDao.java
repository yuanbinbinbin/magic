package com.yb.magicplayer.db.greendao.base;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.yb.magicplayer.entity.Music;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property AllTime = new Property(3, int.class, "allTime", false, "ALL_TIME");
        public final static Property Size = new Property(4, int.class, "size", false, "SIZE");
        public final static Property Addr = new Property(5, String.class, "addr", false, "ADDR");
        public final static Property Album_id = new Property(6, int.class, "album_id", false, "ALBUM_ID");
        public final static Property Album = new Property(7, String.class, "album", false, "ALBUM");
        public final static Property Image = new Property(8, String.class, "image", false, "IMAGE");
        public final static Property IsLike = new Property(9, boolean.class, "isLike", false, "IS_LIKE");
        public final static Property Lrc = new Property(10, String.class, "lrc", false, "LRC");
        public final static Property Type = new Property(11, int.class, "type", false, "TYPE");
        public final static Property IsPlaying = new Property(12, boolean.class, "isPlaying", false, "IS_PLAYING");
    }

    private Query<Music> playingQuene_PlayQueneQuery;
    private Query<Music> playList_PlayListQuery;

    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AUTHOR\" TEXT," + // 2: author
                "\"ALL_TIME\" INTEGER NOT NULL ," + // 3: allTime
                "\"SIZE\" INTEGER NOT NULL ," + // 4: size
                "\"ADDR\" TEXT," + // 5: addr
                "\"ALBUM_ID\" INTEGER NOT NULL ," + // 6: album_id
                "\"ALBUM\" TEXT," + // 7: album
                "\"IMAGE\" TEXT," + // 8: image
                "\"IS_LIKE\" INTEGER NOT NULL ," + // 9: isLike
                "\"LRC\" TEXT," + // 10: lrc
                "\"TYPE\" INTEGER NOT NULL ," + // 11: type
                "\"IS_PLAYING\" INTEGER NOT NULL );"); // 12: isPlaying
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
        stmt.bindLong(4, entity.getAllTime());
        stmt.bindLong(5, entity.getSize());
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(6, addr);
        }
        stmt.bindLong(7, entity.getAlbum_id());
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(8, album);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
        stmt.bindLong(10, entity.getIsLike() ? 1L: 0L);
 
        String lrc = entity.getLrc();
        if (lrc != null) {
            stmt.bindString(11, lrc);
        }
        stmt.bindLong(12, entity.getType());
        stmt.bindLong(13, entity.getIsPlaying() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
        stmt.bindLong(4, entity.getAllTime());
        stmt.bindLong(5, entity.getSize());
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(6, addr);
        }
        stmt.bindLong(7, entity.getAlbum_id());
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(8, album);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
        stmt.bindLong(10, entity.getIsLike() ? 1L: 0L);
 
        String lrc = entity.getLrc();
        if (lrc != null) {
            stmt.bindString(11, lrc);
        }
        stmt.bindLong(12, entity.getType());
        stmt.bindLong(13, entity.getIsPlaying() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.getInt(offset + 3), // allTime
            cursor.getInt(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // addr
            cursor.getInt(offset + 6), // album_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // album
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // image
            cursor.getShort(offset + 9) != 0, // isLike
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lrc
            cursor.getInt(offset + 11), // type
            cursor.getShort(offset + 12) != 0 // isPlaying
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAllTime(cursor.getInt(offset + 3));
        entity.setSize(cursor.getInt(offset + 4));
        entity.setAddr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbum_id(cursor.getInt(offset + 6));
        entity.setAlbum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsLike(cursor.getShort(offset + 9) != 0);
        entity.setLrc(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.getInt(offset + 11));
        entity.setIsPlaying(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "playQuene" to-many relationship of PlayingQuene. */
    public List<Music> _queryPlayingQuene_PlayQuene(long id) {
        synchronized (this) {
            if (playingQuene_PlayQueneQuery == null) {
                QueryBuilder<Music> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                playingQuene_PlayQueneQuery = queryBuilder.build();
            }
        }
        Query<Music> query = playingQuene_PlayQueneQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "playList" to-many relationship of PlayList. */
    public List<Music> _queryPlayList_PlayList(long id) {
        synchronized (this) {
            if (playList_PlayListQuery == null) {
                QueryBuilder<Music> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                playList_PlayListQuery = queryBuilder.build();
            }
        }
        Query<Music> query = playList_PlayListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
